{% extends 'epidemic/base.html' %}

{% block body_block %}

    <h2 class="blog-post-title">Code</h2>
    
    <p>This is the Python code used to construct the model. You can follow along by refering to the comments highlighted in green. The scripts used to assemble the transportation data, construct the metapopulation layer of the model, create all the graphs, and build this website have not been included, though of course they're available if you're interested. </p>

    <hr>
    
    <!-- For code chunks. -->
    <pre class="brush: python" name="code">
    
    
    

#################################################################################
############################ Main Epidemic Model ################################

# This is the main epidemic model. It loads a pickle with population information 
# and a pickle with a transportation matrix and outputs six dataframes with the final
# results of all iterations for each of six strategies. Disease parameters, initial
# infecteds, etc must be specified.

# Before running, (1) transport matrix must be current (transportMatrix.py), (2)
# population estimates must be current (epPopEstimator.py) and (3) proportional 
# transport matrix (transportMatrixProp.py) must be current. If any changes are made
# upstream, above programs must first be run before main model can run.



############################ Initial plumbing ###################################

# Importing necessary packages
import pandas as pd
from pandas import DataFrame, pivot_table
import numpy as np
import copy, pickle
import pylab as pl
from matplotlib.font_manager import FontProperties as fmp
import time

# Loading the population info and transportation databases
pfile = open("epPopPickle.txt", 'r')
pop = pickle.load(pfile)
pfile.close()

tmPfile = open("tmPickleP.txt", 'r')
tmP = pickle.load(tmPfile)
tmPfile.close()

# Creating smaller version of the databases for testing purposes, only including cities
# with population of 5 million or more
popTest = pop[pop['N'] > 3000000]
tmPTest = pd.DataFrame(tmP, index = popTest.index, columns = popTest.index)

# Rounding populations to zero decimal places
N = np.round(popTest['N'],0)   
Names = popTest['Name']
    
# The transportation matrix. 

transMatrix = tmPTest
       
numTimePeriods = 500  # Number of days to model the epidemic
iterations = 40       # Number of iterations 
expPop = list(popTest.Name).index(31703)  # Putting infection in NYC

seed = np.random.randint(1, 1000000) 
# All strategies will be presented with the same "random" parameters

tRange = np.arange(numTimePeriods)


########################### Initializing model ###################################

for st in range(5):        # This sets up the loop to model all six strategies
    
    if st == 0:            # Base case, no intervention
        quarantine = 'N'
        vac = 'N' 
        localOnly = 'Y'
        travRestr = 'N'
    elif st == 1:          # Quarantine/targetted vaccination only
        quarantine = 'Y'
        vac = 'N' 
        localOnly = 'Y'
        travRestr = 'N'
    elif st == 2:          # Quarantine/targetted vac + local herd vac
        quarantine = 'Y'
        vac = 'Y' 
        localOnly = 'Y'
        travRestr = 'N'
    elif st == 3:          # The above + travel restrictions
        quarantine = 'Y'
        vac = 'Y' 
        localOnly = 'Y'
        travRestr = 'Y'
    elif st == 4:          # Quarantine/targetted vac + countrywide herd vac
        quarantine = 'Y'
        vac = 'Y' 
        localOnly = 'N'
        travRestr = 'N'
    elif st == 5:          # The above + travel restrictions
        quarantine = 'Y'
        vac = 'Y' 
        localOnly = 'N'
        travRestr = 'Y'
      
        
    ### More plumbing ### 
    
    np.random.seed(seed) 
    # Setting the seed so each strategy gets the same "random" set of parameters
  
    tot = pd.DataFrame({}) 
    TOT = pd.DataFrame({})
    # Empty dataframes to store the endstates of each iteration
        
         
    ######################## Specifying parameters ################################
    
    for mc in range(iterations): # Starting the Monte Carlo loop
    
        startTime = time.time()  # Timing each iteration for testing purposes
    
    
        ### Disease parameters (assumptions and uncertainties) ###
        # Due to my limited experience as an epidemiologist and modeller, I've frequently chosen
        # the triangular distribution as my workhorse "good enough" solution.
        # All of the assumptions can be easily changed. Many of them probably should be.
        # Generally, disease and vaccine parameters are well-researched while cost assumptions and
        # behavioral assumptions are weak.

        lenLat = np.random.normal(12.0, 2.0)                     
        # Length of latent/exposed period (exposed but not yet infectious). For each
        # individual, this is gamma distributed
        
        lenProdr = np.random.triangular(.5, 3.0, 5.0)
        # Length of prodromal period (mildly infectious)
        
        lenInf = np.random.normal(9.0, 2.0)                    
        # Length of fully infectious period. For each individual, this is gamma 
        # distributed
        
        rR_tot = np.random.triangular(3.0, 4.0, 9.0)
        # Basic reproductive ratio
        
        prodrPercentTot = lenProdr/(lenProdr+lenInf)
        # Percent of total infectious time spent in prodromal stage. Used in 
        # calculations below
        
        rR_prodr = np.random.triangular(0.0, rR_tot*prodrPercentTot*.5, rR_tot*prodrPercentTot)
        # Amount of reproductive number generated during prodromal period, ie number 
        # of secondary cases generated per primary case during the prodromal period. 
        # The max number implies that contagiousness in the prodromal phase equals that
        # in the infectious phase. The min number implies no contagiousness during
        # prodromal period
        
        rR_inf = rR_tot - rR_prodr  
        # Amount of the reproductive number generated during the full infectious phase.
        # Calculated as the remainder of total number after prodromal infections
        
        beta = rR_inf / lenInf 
        # New infections per fully-infected person per day in completely susceptible
        # population. This contributes to the flow from Susceptibles to Exposeds
        
        betaP = rR_prodr / lenProdr
        # New infections per Prodromal per day in completely susceptible population. 
        # This contributes to the flow from Susceptibles to Exposeds
        
        sigma= 1.0/lenLat # Dictates the flow from Exposeds to Prodromals
        
        epsilon = 1.0/lenProdr # Dictates flow from Prodromals to Infecteds
        
        gamma= 1.0/lenInf # Dictates the flow from Infecteds to Removeds

        mortalityRate = np.random.normal(.31, .05)  # Mortality rate


        ### Vaccine assumptions ###
        
        vMortRate = np.random.triangular(1.0/1000000.0, 3.0/1000000.0, 10.0/1000000.0)    
        # Vaccine mortality rate. Solid estimates based on research.
        
        dailyVacProp = np.random.triangular(.03, .05, .1) 
        # The max proportion of ppl vaccinated per day.
        
        vacLag = np.random.triangular(3.0, 5.0, 14.0)
        # The number of days following ID of outbreak vaccination begins. 
        
        vacFail = np.random.triangular(1.0/1000000.0, 3.0/1000000.0, 100.0/1000000.0)
        # The proportion of failed vaccinations. Can be the result of ineffective vaccine
        # or misuse. TODO: this isn't yet hooked up to the model
        
        
        ### Cost assumptions ###
        
        qCost = 100.0         # Cost of quarantine/targetted vac per infected per 
        # day ($). Very rough estimate

        vacCost = 20.0        # Cost of vaccination per individual ($). Very rough 
        # estimate


        ### Other assumptions and uncertainties ###

        IDlag = np.random.gamma(10.0, 1.0) 
        # Number of days after attack until identification

        cautionCoef = np.random.triangular(.05, .25, .5)
        # The amount by which people increase precautionary measures following ID of
        # outbreak (staying indoors, reducing contact, washing hands, etc) regardless 
        # of gov't intervention

        IDrate = np.random.triangular(.5, .8, .95)       
        # The proportion of infecteds identified. This needs to be refined to reflect
        # when they are IDed
        
        quarantineEffID = np.random.triangular(.05, .1, .2) + np.random.normal(.05, .01)*lenLat + np.random.normal(.05, .015)*(1-betaP/beta)*lenProdr
        if quarantineEffID > 1.0:
            quarantineEffID = 1.0
        # The effectiveness of quarantine for IDed infecteds. An individual infected's
        # contagiousness will be reduced by this percentage following quarantine, ie they
        # will generate this percentage fewer secondary cases. It is a direct function of
        # the length of the latency period and the relative contagiousness of the
        # prodromal period. It is calibrated so that with the longest reasonable latent
        # period and a prodromal period with no infectiousness (ie continuation of latent
        # period), quarantine effectiveness of IDed infecteds is 1.0
        
        quarantineEff = quarantineEffID * IDrate
        # Overall efficacy of quarantine

        # Note: This simple compartment model cannot predict quarantine efficiency 
        # itself, it takes quarantine efficacy as an input. In this case, beta 
        # reductions of above 80% begin to kill the epidemic, anything below 80% just
        # prolongs it

        travRestrEff = np.random.triangular(.7, .85, .99)    
        # The effectiveness of travel restrictions. Mixing between geographic 
        # populations will be reduced by this proportion

        threshhold = np.random.triangular(1.0, 15.0, 50.0)    
        # When interventions are purely local, thi is the threshhold number of 
        # identified infecteds past which a population implements the interventions

        expNum = np.random.triangular(10.0, 100.0, 3000.0) 
        # The number of initial exposed people, or index cases
            


        ########################## Calculations ################################

        # Initiating model apparatus 
        n = len(N)
        Y = np.zeros(n)    # Infecteds
        Z = np.zeros(n)    # Exposeds
        Z[expPop] = expNum # Placing index cases in attack location
        P = np.zeros(n)    # Prodromals
        W = np.zeros(n)    # Removeds
        X = N - Z          # Susceptibles 
        V = np.zeros(n)    # Vaccinated 

        df = DataFrame({'Name':Names, 'N':N, 'Y':Y, 'P':P, 'X':X, 'Z':Z, 'D':np.zeros(n), 'W':W, 'tp':np.zeros(n), 'qCost': np.zeros(n), 'V':np.zeros(n)}, index = Names)

        dfFinal = copy.deepcopy(df)
        
        # Beginning the main loop of differential equations
        for i in range(1,numTimePeriods): 
        
            # Adding variation to the day's transportation matrix.
            l = transMatrix * np.random.normal(1.0, .15, transMatrix.shape)
     
            # Preparing to implement travel restrictions if appropriate
            if travRestr == 'Y':
                postIDTranspMatrix = l*(1-travRestrEff)
            elif travRestr == 'N':
                postIDTranspMatrix = l
                
            # Preparing to implement caution and quarantine/targetted vaccination
            # if appropriate
            if quarantine == 'Y':
                postIDBeta = beta*(1-cautionCoef)*(1-quarantineEff)
                postIDBetaP = betaP*(1-cautionCoef)*(1-quarantineEff)
            elif quarantine == 'N':
                postIDBeta = beta*(1-cautionCoef)
                postIDBetaP = betaP*(1-cautionCoef)
        
            ndf = DataFrame({'Name':Names,'N':N, 'P': 0.0, 'Y':0.0, 'X':0.0, 'Z':0.0, 'W':0.0, 'D':0.0, 'V':0.0,'sum':0.0, 'qCost': np.zeros(n), 'tp':np.ones(n)*i},  index = Names)

            if i > int(IDlag):
                betaA = postIDBeta
                betaPA = postIDBetaP
                l = postIDTranspMatrix
            else:
                betaA = beta
                betaPA = betaP
            
            
            # Transmitting the virus within each population. This works simultaneously
            # w two dataframes: 'Previous' (the results from the previous time period)
            # and 'New' (blank initially). It fills in 'New' based on the values in
            # 'Previous', using the equations specified. It then appends the filled in
            # 'New' to the master version. Finally, 'New' is designated as 'Previous'
            # for use in the next time period and a new, blank dataframe is created
            # and specified 'New'.            
            for j in range(Names.min(), Names.max()+1):
                if j in Names:
                    
                    # Changes in S
                    ndf['X'][j] = df['X'][j] - betaA*df['X'][j]*df['Y'][j]/df['N'][j] - betaPA*df['X'][j]*df['P'][j]/df['N'][j]
                    
                    # Changes in E
                    ndf['Z'][j] = df['Z'][j] + betaA*df['X'][j]*df['Y'][j]/df['N'][j] + betaPA*df['X'][j]*df['P'][j]/df['N'][j] - sigma*df['Z'][j] 
                    
                    # Changes in P
                    ndf['P'][j] = df['P'][j] + sigma*df['Z'][j] - epsilon*df['P'][j]
                    
                    # Changes in I
                    ndf['Y'][j] = df['Y'][j] + epsilon*df['P'][j] - gamma*df['Y'][j] 
                    
                    # Changes in R
                    ndf['W'][j] = df['W'][j] + gamma*df['Y'][j] 
                    
                    # Used for testing purposes to validate results
                    ndf['sum'][j] = ndf['X'][j] + ndf['Z'][j] + ndf['Y'][j] + ndf['W'][j] 
                    
                    # Number dead, cumulative
                    ndf['D'][j] = ndf['W'][j] * mortalityRate
                    
              
            # Conducting immunizations, when appropriate. A percentage of Susceptibles 
            # will be removed from the pool of hosts each day after a certain lag 
            # following ID of outbreak.
            for j in range(Names.min(), Names.max()+1):
                if j in Names:
                    if (i > IDlag + vacLag and vac == 'Y' and localOnly == 'N') or (i > IDlag + vacLag and vac == 'Y' and localOnly == 'Y' and  ndf['Y'][j]*IDrate > threshhold):
                        ndf['X'][j] -= ndf['X'][j]*dailyVacProp
                        ndf['V'][j] = ndf['X'][j]*dailyVacProp
                    else:
                        ndf['V'][j] = 0
                        
                    # Adding up quarantine costs
                    if i > IDlag and quarantine == 'Y' and ndf['Y'][j]*IDrate > 1.0:
                        ndf['qCost'][j] = ndf['Y'][j]*IDrate*qCost
                    else:
                        ndf['qCost'][j] = 0
      
            
            # Mixing between populations. Movement is first subtracted from sending
            # populations, then added to receiving populations. Infecteds and Prodromals
            # don't travel, but Exposeds do.
            for j in range(Names.min(), Names.max()+1):
                if j in Names: 
                    for g in range(Names.min(), Names.max()+1):
                        if g in Names:
                        
                            # Sending
                            ndf['X'][j] -= l[g][j]*ndf['X'][j] 
                            ndf['Z'][j] -= l[g][j]*ndf['Z'][j]
                            ndf['W'][j] -= l[g][j]*ndf['W'][j]
                            
                            # Receiving
                            ndf['X'][j] += l[j][g]*ndf['X'][g] 
                            ndf['Z'][j] += l[j][g]*ndf['Z'][g]
                            ndf['W'][j] += l[j][g]*ndf['W'][g]

            dfFinal = dfFinal.append(ndf)
            df = ndf
            
        # Finding epidemic endpoint. This is defined as the point at which national
        # deaths per day drops below one
            
        pt = pd.pivot_table(dfFinal, ['D'], 'tp', aggfunc=np.sum)

        for i in range(1, len(pt)):
            diff = pt['D'][i] - pt['D'][i-1]
            if diff < 1.0 and i > 40.0 or i == len(pt)-1:
                endpoint = i
                break   
                # Note: "i > 40.0" above is used as a brute force method to prevent
                # the program from reporting the epidemic endpoint as day number one
                # (when deaths per day are also less than one)
            
            
        ######################## Compiling results ###################################    
        
        # The last entry in the panel contains the final results for each metapopulation
        lastEntry = dfFinal[dfFinal['tp'] == tRange[-2]]
        
        # Creating a unique index for each metapopulation-time period combination. 
        #This will be used to create a pivot table reporting the average of all 
        #individual iterations of the epidemic. For use in reporting expected values. 
        dfFinal['pvtIndex'] = dfFinal.Name + dfFinal.tp / 1000.0
        
        print(len(dfFinal))
        print(dfFinal)
        
        # Printing out values to verify results. Used during testing
        #print(st)
        #print(mc)
        #print(pt)
        #print(endpoint)    
        #print(dfFinal[dfFinal.index==31703])
        #print(dfFinal[dfFinal.index==30977].tail())
        
        tX = sum(lastEntry['X']) # Total remaining S
        tZ = sum(lastEntry['Z']) # Total remaining E
        tY = sum(lastEntry['Y']) # Total remaining I
        tW = sum(lastEntry['W']) # Total remaining R
        tV = sum(dfFinal['V'])   # Total vaccinated
        
        tVcost = tV * vacCost          # Total vaccination costs
        tVD = tV * vMortRate           # Total killed by vacc
        tD = sum(lastEntry['D'])+tVD   # Total dead overall
        tqCost = sum(dfFinal['qCost']) # Total quart. cost
        
        # The name of the scenario as a string
        scenario = 'Index Cases: '+str(expNum)+'<br>'+'ID Lag: '+str(IDlag) +'<br>' +'Reproductive Ratio: '+str(rR_tot) +'<br>' +'Beta: '+str(beta) +'<br>' +'betaP: '+str(betaP) +'<br>'+'Length Lat. Period: '+str(lenLat) +'<br>'+'Length Prodr. Period: '+str(lenProdr) +'<br>'+ 'Length Inf. Period: '+str(lenInf) +'<br>'+ 'Mortality Rate: '+str(mortalityRate) +'<br>'+ 'Quarantine Eff.: '+str(quarantineEff) +'<br>'+ 'Caution: '+str(cautionCoef) +'<br>'+'Vac. Mort. Rate: '+str(vMortRate) +'<br>' +  'Max Daily Vac: '+str(dailyVacProp) +'<br>' +  'Init Vac Lag: '+str(vacLag) +'<br>' + 'Travel Rest. Eff: '+str(travRestrEff) +'<br>' + 'Action Threshhold: '+str(threshhold) 
        
        # The final results of the given iteration
        totInd = {'rR_tot': rR_tot, 'rR_prodr': rR_prodr,'beta':beta, 'lenInf': lenInf, 'lenProdr': lenProdr, 'betaP':betaP, 'lenLat': lenLat, 'mr': mortalityRate, 'vmr': vMortRate, 'cautionCoef': cautionCoef, 'quartEff': quarantineEff, 'idLag': IDlag, 'IDrate': IDrate, 'indexCases':expNum, 'travRestEff': travRestrEff, 'dailyvacprop': dailyVacProp, 'tX':tX, 'tZ': tZ, 'tY':tY, 'tW':tW, 'tD':tD, 'tV':tV, 'tqCost':tqCost, 'tvCost':tVcost, 'endpoint': endpoint, 'vacLag': vacLag, 'tVD':tVD, 'scenario':scenario}
  
        # Appending results of individual iteration to master copy. This dataframe 
        # will be returned as the output of the model. It will have as many rows as
        # there are iterations and contains the columns specified in totInd directly
        # above.
        tot=tot.append(totInd, ignore_index=True)
        TOT = TOT.append(dfFinal, ignore_index=True)
        
        # Ending the stopwatch and reporting timing. For testing purposes
        endTime = time.time()
        timeDuration = (endTime - startTime) / 60.0
        print("this iteration took "+str(timeDuration)+" minutes.")
        print("the whole model will take "+str(timeDuration*iterations*5/60.0)+" hours")


    # Saving output as a persistent object for use in graphing, analysis etc. Two
    # separate dataframes are stored for each strategy, one with all information,
    # and another with only the final results of each iteration
    
        
    outputFile = open(str("epMCOutputFULL"+str(st)+".txt"), 'w')
    pickle.dump(TOT, outputFile)
    outputFile.close()    
    
    outputFile = open(str("epMCOutput"+str(st)+".txt"), 'w')
    pickle.dump(tot, outputFile)
    outputFile.close()
        

    
    
############################## Calculations complete! ###################################




           
    </pre>

{% endblock %}
